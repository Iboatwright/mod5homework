12. Calculating the Factorial of a Number
    In mathematics, the notation n! represents the factorial of the
    nonnegative integer n. The factorial of n is the product of all
    the nonnegative integers from 1 up through n. For example:
            7! = 1 × 2 × 3 × 4 × 5 × 6 × 7 = 5,040
    and
                4! = 1 × 2 × 3 × 4 = 24
    Design a program that asks the user to enter a nonnegative integer
    and then displays the factorial of that number.

Pseudocode
----------
Module main()
    // Local variables
    Declare Integer nObjectCount = 0    // Nonnegative number of objects
    Declare Integer nFactorial = 0  // Resulting permutation count

    // Display intro to user.
    Call fluffy_intro()

    // Get the a non-negative number of Objects from the user
    Set nObjectCount = get_valid_inputs([["nonnegative integer",
                   "nonnegative number to calculate"]])

    // Calculate the factorial of nObjects
    Set nFactorial = calc_factorial(nObjects)

     // Display calculated factorial to user
     display_results(nObjects, nFactorial)
End Module


// Displays an introduction to the program and describes what it does
Module fluffy_intro()
    Display "Welcome to the n! Factorial Calculator."
    Display "This program will calculate factorials of nonnegative integers."
    Display "It then displays the results for your viewing pleasure.\n"
End Module


// get_valid_inputs requests input from the user then tests the input.
//   If invalid, it will alert the user and request the correct input.
// The parameter is a nested List of ordered pair Lists.
//   First value is the validation test and second is the user prompt.
Module get_valid_inputs(List requestsList)

    // local List to hold user inputs for return to calling module
    Declare List userInputs

    // Loop through each entry in requestList assigning each List pair
    //  to request.
    For request In requestsList Do
        // Temporary holding variable for testing user input validity
        Declare untestedInput

        // First user prompt before testing loop
        Set untestedInput = int(prompt_user_for_input(request[1]))

        // If test_value returns True, Not converts it to False and the While
        //  Loop will not execute.
        // If test_value returns False, the While executes and the user is
        //  prompted to enter a valid value.
        While (Not test_value(request[0], untestedInput))
            Display untestedInput "is not a valid value."
            Set untestedInput = (prompt_user_for_input(request[1]))
        End While

        // The user input tested valid and is appended to the userInputs List.
        Append untestedInput To userInputs // This isn't in the class text
    End For

    Return userInputs
End Module


// prompt_user_for_item accepts a string as an argument and returns the input
// to the calling module.
Module prompt_user_for_item(String promptTerm)
    Display "Please enter your,", promptTerm, "."
    // The user input is returned in an anonymous variable
    Return Input
End Module


// test_value uses the testCondition to select the proper test.
// It returns True or False to the calling Module.
Module test_value(testCondition, testItem)
    // The If-Then-Else structure functions as a Switch for test selection.
    If testCondition == "nonnegative integer" Then
        // Is testItem an Integer? If so, then is it also greater than
        //  or equal to 0?
        If ((testItem Type == Integer) And (testItem >= 0)) Then
            Return True
        Else
            Return False
        End If
    End If
End Module


// calc_factorial uses recursion to repeatedly call itself while decrementing
//  nCount and multiplying fValue by nCount.  When nCount is less than or
//  equals 1 only fValue is returned.  nCount can equal 0 because 0! equals 1.
//  Recursion isn't very efficient in Python and has a limit to the number of
//  recursive calls that can be made.
Module calc_factorial(nCount, fValue = 1)
    If nCount <= 1 Then
        Return fValue
    Else
        Return calc_factorial(nCount - 1, fValue * nCount)



// display_results is passed values used in print statements to display
//  the results of the program to the user.
Module display_results(nObjects, nFactorial)
    Display "The factorial of", nObjects, " ("is", nFactorial,"."
End Module

